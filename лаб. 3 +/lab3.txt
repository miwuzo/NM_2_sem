%Уравнение и диапазон
F = @(x) x.^3 + 4 * x - 2;
x = linspace(-2, 2);
y0 = 0 * x; %просто прямая y = 0, чтобы было наглядней
del = 0.01; %погрешность


%График и его оформление
plot(x, F(x), 'r')
xlabel('Координата X');
ylabel('Координата Y');
hold on
plot(x, y0, 'black--')
legend('x^3+6x+3', 'y = 0'); 
grid on;

%Метод деления отрезка пополам

%Начало и конец отрезка, где есть корень
%Обязательное условие - функция должна менять знак (ну логично же...)
a = -1;   
b = 1;

%Сам метод
while(abs(b - a) > 2 * del)
    x = ( a + b ) ./ 2; %середина отрезка
    if((F(a) * F(x)) < 0) %функция поменяла знак, значит корень
                           % уже будет в отрезке [a,x]
        b = x; 
    else %функция не поменяла знак, значит корень
                           % уже будет в отрезке [x,b]
        a = x;
    end
end

disp('Корень уравнения с помощью метода деления отрезка пополам');
disp(x);


%Метод Ньютона (метод касательных)

a = -1; b = 1; %переопределение отрезка, чтобы не использовать
                %доп. переменные
der = derivative(); %вызов производной 1-го порядка
der2 = derivative2(); %вызов производной 2-го порядка

%Начальное приближение должно удовлетворять следующему условию
if (F(a) * der2(a) > 0)
    temp = a; 
else
    temp = b;
end
xn = temp - (F(temp) ./ der(temp)); %считаем первое приближение

while(abs(temp - xn) > del) %пока не достигнем необходимой точности, будет продолжать вычислять
    temp = xn;
    xn = temp - (F(temp) ./ der(temp)); %непосредственно формула Ньютона
end

disp('Корень уравнения с помощью метода Ньютона');
disp(xn);

%Метод простой итерации
a = -1; b = 1; %переопределение отрезка, чтобы не использовать
                %доп. переменные
x0 = (a + b) ./ 2; %просто начальное приближение
M = @(x0) 1.01 .* der(x0); %некоторая постоянная
f = @ (x) x - F(x) ./ M(x); % φ(x) - как в методичке

%Сам метод (подставляем новое значение в функцию и т.д.)
x0 = f(x0);
while(abs(x0 - f(x0)) > del)
    x0 = f(x0);    
end

disp('Корень уравнения с помощью метода простых итераций');
disp(x0);

%Первая производная функции
function der = derivative() 
    syms x;
    f = x.^3 + 6 * x + 3;
    syms der;
    der = matlabFunction(diff(f));
end

%Вторая производная функции
function der2 = derivative2() 
    syms x;
    f = x.^3 + 6 * x + 3;
    syms der2;
    der2 = matlabFunction(diff(f, 2));
    end